(defmacro when (test &rest forms)
  (let ((body `(progn ,@forms)))
    `(if ,test ,body)))

(defmacro unless (test &rest forms)
  (let ((body `(progn ,@forms)))
    `(if (not ,test) ,body)))

(defmacro cond (&rest clauses)
  (when (empty? clauses) (return '()))
  (let ((body) (cur) (prev))
    (for-each (clause clauses)
	      (set cur `(if ,(first clause) ,(last clause)))
	      (if (empty? body) (set body cur) (append cur prev))
	      (set prev cur))
    body))

(defmacro for (args &rest body)
  `(let ,(list (first args))
     (while ,(nth 2 args)
	    ,@body
	    ,(nth 3 args))
     ,(last args)))

(defun max (number &rest more-numbers)
  (unless more-numbers (return number))
  (let ((m number))
    (for-each (y more-numbers)
	      (if (> y m)
		  (set m y)))
    m))


(defun min (number &rest more-numbers)
  (unless more-numbers (return number))
  (let ((m number))
    (for-each (y more-numbers)
	      (if (< y m)
		  (set m y)))
    m))
